// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.72'
    repositories {
        google()
        jcenter()
        
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.gms:google-services:4.3.3' // Google Services plugin
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://jitpack.io' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task convertDimens() {
    def xmlFileOriginal = "${project.rootDir}/app/src/main/res/values/dimens.xml"
    def xmlFile320 = "${project.rootDir}/app/src/main/res/values-sw320dp/dimens.xml"
    def xmlFile360 = "${project.rootDir}/app/src/main/res/values-sw360dp/dimens.xml"
    def xmlFile411 = "${project.rootDir}/app/src/main/res/values-sw411dp/dimens.xml"
    def xmlFile420 = "${project.rootDir}/app/src/main/res/values-sw420dp/dimens.xml"
    def xmlFile480 = "${project.rootDir}/app/src/main/res/values-sw480dp/dimens.xml"
    def xmlFile540 = "${project.rootDir}/app/src/main/res/values-sw540dp/dimens.xml"
    def xmlFile600 = "${project.rootDir}/app/src/main/res/values-sw600dp/dimens.xml"

    def xmlOriginal = new XmlParser().parse(xmlFileOriginal)
    def xml320 = xmlOriginal.clone()
    def xml411 = xmlOriginal.clone()
    def xml420 = xmlOriginal.clone()
    def xml480 = xmlOriginal.clone()
    def xml540 = xmlOriginal.clone()
    def xml600 = xmlOriginal.clone()

    xml320.dimen.each { dimen ->
        def value = dimen.text()
        if (value.contains("sp")) {
            def newValue = value.replace("sp", "").toFloat()
            newValue = round((320 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "sp"
        } else if (value.contains("px")) {
            def newValue = value.replace("px", "").toFloat()
            newValue = round((320 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "px"
        } else {
            def newValue = value.replace("dp", "").toFloat()
            newValue = round((320 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "dp"
        }
    }
    xml411.dimen.each { dimen ->
        def value = dimen.text()
        if (value.contains("sp")) {
            def newValue = value.replace("sp", "").toFloat()
            newValue = round((411 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "sp"
        } else if (value.contains("px")) {
            def newValue = value.replace("px", "").toFloat()
            newValue = round((411 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "px"
        } else {
            def newValue = value.replace("dp", "").toFloat()
            newValue = round((411 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "dp"
        }
    }
    xml420.dimen.each { dimen ->
        def value = dimen.text()
        if (value.contains("sp")) {
            def newValue = value.replace("sp", "").toFloat()
            newValue = round((420 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "sp"
        } else if (value.contains("px")) {
            def newValue = value.replace("px", "").toFloat()
            newValue = round((420 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "px"
        } else {
            def newValue = value.replace("dp", "").toFloat()
            newValue = round((420 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "dp"
        }
    }
    xml480.dimen.each { dimen ->
        def value = dimen.text()
        if (value.contains("sp")) {
            def newValue = value.replace("sp", "").toFloat()
            newValue = round((480 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "sp"
        } else if (value.contains("px")) {
            def newValue = value.replace("px", "").toFloat()
            newValue = round((480 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "px"
        } else {
            def newValue = value.replace("dp", "").toFloat()
            newValue = round((480 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "dp"
        }
    }
    xml540.dimen.each { dimen ->
        def value = dimen.text()
        if (value.contains("sp")) {
            def newValue = value.replace("sp", "").toFloat()
            newValue = round((540 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "sp"
        } else if (value.contains("px")) {
            def newValue = value.replace("px", "").toFloat()
            newValue = round((540 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "px"
        } else {
            def newValue = value.replace("dp", "").toFloat()
            newValue = round((540 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "dp"
        }
    }
    xml600.dimen.each { dimen ->
        def value = dimen.text()
        if (value.contains("sp")) {
            def newValue = value.replace("sp", "").toFloat()
            newValue = round((600 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "sp"
        } else if (value.contains("px")) {
            def newValue = value.replace("px", "").toFloat()
            newValue = round((600 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "px"
        } else {
            def newValue = value.replace("dp", "").toFloat()
            newValue = round((600 / 360 * newValue).toFloat(), 2)
            dimen.value = newValue + "dp"
        }
    }

    new XmlNodePrinter(new PrintWriter(new FileWriter(xmlFile360))).print(xmlOriginal)
    new XmlNodePrinter(new PrintWriter(new FileWriter(xmlFile320))).print(xml320)
    new XmlNodePrinter(new PrintWriter(new FileWriter(xmlFile411))).print(xml411)
    new XmlNodePrinter(new PrintWriter(new FileWriter(xmlFile420))).print(xml420)
    new XmlNodePrinter(new PrintWriter(new FileWriter(xmlFile480))).print(xml480)
    new XmlNodePrinter(new PrintWriter(new FileWriter(xmlFile540))).print(xml540)
    new XmlNodePrinter(new PrintWriter(new FileWriter(xmlFile600))).print(xml600)

}

static float round(float d, int decimalPlace) {
    BigDecimal bd = new BigDecimal(Float.toString(d))
    bd = bd.setScale(decimalPlace, BigDecimal.ROUND_HALF_UP)
    return bd.floatValue()
}

clean.dependsOn convertDimens